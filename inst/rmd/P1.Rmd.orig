---
output:  
    word_document :
        reference_docx: QaTableStyle6.docx
params: 
    DBServerName: 
        label: "Database Server Name:"
        value: cc-s-d05.ucdenver.pvt
        input: select
        choices: [cc-s-d05.ucdenver.pvt, vwphbisql06, ihrsql1.ihr.or.kp.org, PRDVDWSQL01, SQL01, BI01]
    DBName:
        label: "Database Name:"
        value: VDW_3_1_DH
        input: select
        choices: [VDW_3_1_DH, VDW.dbo, VDW, CHORDS_VDW_CC_3.1, CHORDS_VDW_CT_3.1, CHORDS_VDW_HP_3.1, CHORDS_VDW_MC_3.1, CHORDS_VDW_SC_3.1, CHORDS_VDW_SS_3.1, CHORDSlive.dbo]
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                message = FALSE,
                warning = FALSE)
startTime <- Sys.time()

# Names of database tables
demographics    <- "demographics"
encounters      <- "encounters"
census_location <- "census_location"
diagnoses       <- "diagnoses"
vital_signs     <- "vital_signs"
lab_results     <- "lab_results"
procedures      <- "procedures"

# set to zero for full read of the database
# set to a positive number to limit the number of rows read from each table
maxQryRows <- 0

# load lib for SQL server connectivity
# install.packages("RODBC")
library(RODBC)

library(knitr)
library(tidyverse)

# connection to sql server
con <- DBI::dbConnect(odbc::odbc(),
                      Driver = "SQL Server",
                      Server = params$DBServerName,
                      Database = params$DBName)

# connection to sql server
sqldb <- odbcDriverConnect(paste('driver={SQL Server};server=',params$DBServerName,';database=',params$DBName, sep=""), readOnlyOptimize = TRUE)

# run this to close the connection to the database
# close(sqldb)

```

#CHORDS QA Report: VDW P1 Tables

The purpose of the data quality program is to characterize the data in CHORDS VDW 3.1 priority level 1 (P1) tables. The P1 tables include the following: DEMOGRAPHICS, ENCOUNTERS, CENSUS_LOCATION, DIAGNOSES, and VITAL_SIGNS. The program uses a series of SQL queries operationalized using RStudio to produce this report. These tables provide descriptive information about data stored in a data partnerâ€™s VDW and can be used to assess data model conformance, data plausibility, and data completeness. This data quality report was generated from CHORDS `r params$DBName`.

###Information about the QA program 
Data Partner: 
Analyst: 
Query Run Date:  `r Sys.Date()`


```{r supporting data and functions, include = FALSE}
## helper functions
 # returns a vector with the column numbers of character variables in the data frame
charVars <- function(df) grep('^ch',sapply(df,class))

 # trims all character variables in a dataframe, sets blank to NA
trimChrVars <- function(df){
for(i in charVars(df)){
  df[,i] <- gsub('\\s+$','',df[,i])
  df[,i] <- ifelse(nchar(df[,i])==0,NA,df[,i])
}
  df
}

# age category calculator
ageCatCalc <- function(age){
  ageCat <- factor(
    ifelse(is.na(age)==TRUE, 0,
           ifelse(age<0              , 1, 
                  ifelse(age>=0 & age<2, 2,
                         ifelse(age>=2 & age<5, 3, 
                                ifelse(age>=5 & age<10, 4, 
                                       ifelse (age>=10 & age<15, 5, 
                                               ifelse(age>=15 & age<19, 6,
                                                      ifelse(age>=19 & age<22, 7,
                                                             ifelse(age>=22 & age<45, 8, 
                                                                    ifelse(age>=45 & age<65, 9, 
                                                                           ifelse(age>=65 & age<75, 10, 
                                                                                  ifelse(age>=75 & age<90, 11,
                                                                                         ifelse(age>=90 , 12, 13)))))) ))))))),
    levels=0:13,
    labels=c('Missing','Negative','0-1','2-4','5-9','10-14','15-18','19-21','22-44','45-64','65-74','75-89','90+','Other')
  )
  
  return(ageCat)
}

# supporting look up tables

stateCnty <- chordsTables::stateCnty

ccsMDxI9 <- chordsTables::ccsMDxI9

ccsMDxI10 <- chordsTables::ccsMDxI10

ccsSDxI9 <- chordsTables::ccsSDxI9

icdLU <- rbind(ccsMDxI10[c('dxCdTp','dxDesc')],ccsSDxI9[c('dxCdTp','dxDesc')]) 

# ISO language lookup
isoLang <- chordsTables::isoLang 
 
# VDW value sets
valSets <- chordsTables::valSets


```

## Data Quality Report Results

##Table 1. Records, Patients, Encounters, and Date Ranges by Table

This table contains summary counts and date ranges by table. Distinct encounters and patient are shown for applicable tables. Data ranges should be used to compare data time windows between tables.

```{r tab1_sum_stats, echo = F}

tab1_dem <- odbc::dbGetQuery(con, "select count(*) as nrows, 
	count(distinct person_id) as npats
	from demographics")

tab1_dem <- data.frame(nrows = tab1_dem$nrows, 
                       npats = tab1_dem$npats, 
                       nencts = NA, 
                       fieldname = NA, 
                       mindt = NA,
                       maxdt = NA)


tab1_enc <- odbc::dbGetQuery(con, "select count(*) as nrows, 
	count(distinct person_id) as npats,
  count(distinct enc_id) as nencts,
  'ADATE' as fieldname,
	min(ADATE) as mindt,
	max(ADATE) as maxdt
	from encounters")


tab1_loc <- odbc::dbGetQuery(con, "select count(*) as nrows, 
	count(distinct person_id) as npats
	from census_location")


tab1_dx <- odbc::dbGetQuery(con, "select count(*) as nrows, 
	count(distinct person_id) as npats,
  'ADATE' as fieldname,
  count(distinct enc_id) as nencts,
	min(ADATE) as mindt,
	max(ADATE) as maxdt
	from diagnoses")

tab1_vs <- odbc::dbGetQuery(con, "select count(*) as nrows,
  count(distinct person_id) as npats,
  'MEASURE_DATE' as fieldname,
  count(distinct enc_id) as nencts,
	min(measure_date) as mindt,
	max(measure_date) as maxdt
	from vital_signs")

tab1_loc <- data.frame(nrows = tab1_loc$nrows, npats = tab1_loc$npats, nencts = NA, fieldname = NA, mindt = NA, maxdt = NA)

tab1_all <- bind_rows(tab1_dem, tab1_enc, tab1_loc, tab1_dx, tab1_vs) %>% 
  bind_cols(Table = c("DEMOGRAPHICS", "ENCOUNTERS", "CENSUS_LOCATION", "DIAGNOSES", "VITAL_SIGNS"), .)

```

```{r tab1_disp, echo = F}

kable(tab1_all, col.names = c("Table", "Records", "Patients", "Encounters", "Date Field", "Min Date", "Max Date"), format.args = list(big.mark = ",")) 
  
```

##Table 2: Missingness Variables across P1 Tables

This table contains record counts for null and unknown values across P1 tables.


```{r tab2_res, echo = F}
tab2_demo_null <- odbc::dbGetQuery(con, 
  "SELECT SUM(CASE WHEN BIRTH_DATE IS NULL THEN 1 ELSE 0 END) as BIRTH_DATE,
   SUM(CASE WHEN GENDER IS NULL THEN 1 ELSE 0 END) as GENDER,
   SUM(CASE WHEN PRIMARY_LANGUAGE IS NULL THEN 1 ELSE 0 END) as PRIMARY_LANGUAGE,
   SUM(CASE WHEN NEEDS_INTERPRETER IS NULL THEN 1 ELSE 0 END) as NEEDS_INTERPRETER,
   SUM(CASE WHEN RACE1 IS NULL THEN 1 ELSE 0 END) as RACE1,
   SUM(CASE WHEN HISPANIC IS NULL THEN 1 ELSE 0 END) as HISPANIC,
   SUM(CASE WHEN SEXUAL_ORIENTATION IS NULL THEN 1 ELSE 0 END) as SEXUAL_ORIENTATION,
   SUM(CASE WHEN GENDER_IDENTITY IS NULL THEN 1 ELSE 0 END) as GENDER_IDENTITY
      FROM DEMOGRAPHICS")

tab2_demo_null2 <- data.frame(table = rep("DEMOGRAPHICS", ncol(tab2_demo_null)), var = names(tab2_demo_null), records_null = t(tab2_demo_null)[,1])
row.names(tab2_demo_null2) <- NULL

tab2_enc_null <- odbc::dbGetQuery(con, 
  "SELECT SUM(CASE WHEN ADATE IS NULL THEN 1 ELSE 0 END) as ADATE,
   SUM(CASE WHEN DDATE IS NULL THEN 1 ELSE 0 END) as DDATE,
   SUM(CASE WHEN PROVIDER IS NULL THEN 1 ELSE 0 END) as PROVIDER,
   SUM(CASE WHEN ENCTYPE IS NULL THEN 1 ELSE 0 END) as ENCOUNTER_SUBTYPE
      FROM ENCOUNTERS")

tab2_enc_null2 <- data.frame(table = rep("ENCOUNTERS", ncol(tab2_enc_null)), var = names(tab2_enc_null), records_null = t(tab2_enc_null)[,1])
row.names(tab2_enc_null2) <- NULL

tab2_cl_null <- odbc::dbGetQuery(con, 
  "SELECT SUM(CASE WHEN GEOCODE IS NULL THEN 1 ELSE 0 END) as GEOCODE,
   SUM(CASE WHEN CITY_GEOCODE IS NULL THEN 1 ELSE 0 END) as CITY_GEOCODE
      FROM CENSUS_LOCATION")

tab2_cl_null2 <- data.frame(table = rep("CENSUS_LOCATION", ncol(tab2_cl_null)), var = names(tab2_cl_null), records_null = t(tab2_cl_null)[,1])
row.names(tab2_cl_null2) <- NULL

tab2_dx_null <- odbc::dbGetQuery(con, 
  "SELECT SUM(CASE WHEN ENC_ID IS NULL THEN 1 ELSE 0 END) as ENC_ID,
   SUM(CASE WHEN ADATE IS NULL THEN 1 ELSE 0 END) as ADATE,
   SUM(CASE WHEN DX IS NULL THEN 1 ELSE 0 END) as DX,
   SUM(CASE WHEN PRINCIPAL_DX IS NULL THEN 1 ELSE 0 END) as PRINCIPAL_DX,
   SUM(CASE WHEN PRIMARY_DX IS NULL THEN 1 ELSE 0 END) as PRIMARY_DX
      FROM DIAGNOSES")

tab2_dx_null2 <- data.frame(table = rep("DIAGNOSES", ncol(tab2_dx_null)), var = names(tab2_dx_null), records_null = t(tab2_dx_null)[,1])
row.names(tab2_dx_null2) <- NULL

tab2_vs_null <- odbc::dbGetQuery(con, 
  "SELECT SUM(CASE WHEN ENC_ID IS NULL THEN 1 ELSE 0 END) as ENC_ID,
   SUM(CASE WHEN ENCTYPE IS NULL THEN 1 ELSE 0 END) as ENCTYPE,
   SUM(CASE WHEN HT IS NULL THEN 1 ELSE 0 END) as HT,
   SUM(CASE WHEN WT IS NULL THEN 1 ELSE 0 END) as WT,
   SUM(CASE WHEN DIASTOLIC IS NULL THEN 1 ELSE 0 END) as DIASTOLIC,
   SUM(CASE WHEN SYSTOLIC IS NULL THEN 1 ELSE 0 END) as SYSTOLIC,
   SUM(CASE WHEN HT_RAW IS NULL THEN 1 ELSE 0 END) as HT_RAW,
   SUM(CASE WHEN WT_RAW IS NULL THEN 1 ELSE 0 END) as WT_RAW,
   SUM(CASE WHEN BMI_RAW IS NULL THEN 1 ELSE 0 END) as BMI_RAW,
   SUM(CASE WHEN DIASTOLIC_RAW IS NULL THEN 1 ELSE 0 END) as DIASTOLIC_RAW,
   SUM(CASE WHEN SYSTOLIC_RAW IS NULL THEN 1 ELSE 0 END) as SYSTOLIC_RAW,
   SUM(CASE WHEN BP_TYPE IS NULL THEN 1 ELSE 0 END) as BP_TYPE,
   SUM(CASE WHEN POSITION IS NULL THEN 1 ELSE 0 END) as POSITION,
   SUM(CASE WHEN HEAD_CIR_RAW IS NULL THEN 1 ELSE 0 END) as HEAD_CIR_RAW,
   SUM(CASE WHEN RESPIR_RAW IS NULL THEN 1 ELSE 0 END) as RESPIR_RAW,
   SUM(CASE WHEN TEMP_RAW IS NULL THEN 1 ELSE 0 END) as TEMP_RAW,
   SUM(CASE WHEN PULSE_RAW IS NULL THEN 1 ELSE 0 END) as PULSE_RAW
      FROM VITAL_SIGNS")

tab2_vs_null2 <- data.frame(table = rep("VITAL_SIGNS", ncol(tab2_vs_null)), var = names(tab2_vs_null), records_null = t(tab2_vs_null)[,1])
row.names(tab2_vs_null2) <- NULL

tab2_null <- bind_rows(tab2_demo_null2, tab2_enc_null2, tab2_cl_null2, tab2_dx_null2, tab2_vs_null2) %>% 
  mutate(
    pct_rec = ifelse(table == "DEMOGRAPHICS", (records_null / tab1_dem$nrows * 100), 
                     ifelse(table == "ENCOUNTERS", (records_null / tab1_enc$nrows * 100), 
                             ifelse(table == "CENSUS_LOCATION", (records_null / tab1_loc$nrows * 100), 
                                     ifelse(table == "DIAGNOSES", (records_null / tab1_dx$nrows * 100), 
                                             ifelse(table == "VITAL_SIGNS", (records_null / tab1_vs$nrows * 100), NA)))))
  )

tab2_demo_uk <- odbc::dbGetQuery(con, 
  "SELECT SUM(CASE WHEN GENDER = 'U' THEN 1 ELSE 0 END) as GENDER,
   SUM(CASE WHEN PRIMARY_LANGUAGE = 'UNK' THEN 1 ELSE 0 END) as PRIMARY_LANGUAGE,
   SUM(CASE WHEN NEEDS_INTERPRETER = 'U' THEN 1 ELSE 0 END) as NEEDS_INTERPRETER,
   SUM(CASE WHEN RACE1 = 'UN' THEN 1 ELSE 0 END) as RACE1,
   SUM(CASE WHEN HISPANIC = 'U' THEN 1 ELSE 0 END) as HISPANIC,
   SUM(CASE WHEN SEXUAL_ORIENTATION = 'UN' THEN 1 ELSE 0 END) as SEXUAL_ORIENTATION,
   SUM(CASE WHEN GENDER_IDENTITY = 'UN' THEN 1 ELSE 0 END) as GENDER_IDENTITY
      FROM DEMOGRAPHICS")

tab2_demo_uk2 <- data.frame(table = rep("DEMOGRAPHICS", ncol(tab2_demo_uk)), var = names(tab2_demo_uk), records_uk = t(tab2_demo_uk)[,1])
row.names(tab2_demo_uk2) <- NULL

tab2_enc_uk <- odbc::dbGetQuery(con, 
  "SELECT SUM(CASE WHEN PROVIDER = 'UNKNOWN' THEN 1 ELSE 0 END) as PROVIDER
      FROM ENCOUNTERS")

tab2_enc_uk2 <- data.frame(table = rep("ENCOUNTERS", ncol(tab2_enc_uk)), var = names(tab2_enc_uk), records_uk = t(tab2_enc_uk)[,1])
row.names(tab2_enc_uk2) <- NULL

tab2_uk <- bind_rows(tab2_demo_uk2, tab2_enc_uk2) %>% 
  mutate(
    pct_rec_uk = ifelse(table == "DEMOGRAPHICS", (records_uk / tab1_dem$nrows * 100), 
                                     ifelse(table == "ENCOUNTERS", (records_uk / tab1_enc$nrows * 100), NA))
  )

tab2_all <- left_join(tab2_null, tab2_uk, by = c("table", "var"))

```

```{r tab2_disp, echo=FALSE}

kable(tab2_all, col.names = c("Table", "Variable", "Null Records", "Percent of Records Null", "Unknown Records", "Percent of Records Unknown"), digits = 2, format.args = list(big.mark = ","))
```


#Examination of the DEMOGRAPHICS Table

##Table 3. Overall demographics

```{r Demographic table, include=F}
nDemogRows <- sqlQuery(sqldb, 'select  count(*) as nDemogRows FROM  demographics') 

demogSummary <- sqlQuery(sqldb, 
                  paste('select  count(*) as nDemogRows ',
                                ', count(distinct person_id) as nPatsDemog ',
		                            ', sum(nPatsWithEncs) as nPatsWithEncs ',
		                            ', sum(nPatsWithLoc) as nPatsWithLoc ',
		                            ', sum(nPatsWithDiag) as nPatsWithDiag ',
		                            ', sum(nPatsWithVital) as nPatsWithVital' ,
		                            '  FROM (select distinct',
		                                          ' person_id',
		                                         ', case when person_id in (select distinct person_id from', encounters,' ) then 1 else 0 end as nPatsWithEncs ',
		                                        ',  case when person_id in (select distinct person_id from', census_location,' ) then 1 else 0 end as nPatsWithLoc ',
		                                        ',  case when person_id in (select distinct person_id from', diagnoses,' ) then 1 else 0 end as nPatsWithDiag ',
		                                        ',  case when person_id in (select distinct person_id from', vital_signs,' ) then 1 else 0 end as nPatsWithVital ',
		                                        '  FROM',  demographics,') as q',
                        sep=" "
                 ),
                 max=maxQryRows
                  )

gc()

demogSummary <- cbind(demogSummary,nDemogRows)

demogTable <-
  with(demogSummary,
  rbind(
    c('Total rows in the demographic table'         ,nDemogRows    ,round(100*nDemogRows/nPatsDemog,1)),
    c('Unique patients in the demographic table'    ,nPatsDemog    ,round(100*nPatsDemog/nPatsDemog,1)),
    c('Unique patients found in CENSUS_LOCATION'    ,nPatsWithLoc  ,round(100*nPatsWithLoc/nPatsDemog,1)),
    c('Unique patients found in DIAGNOSES'          ,nPatsWithDiag ,round(100*nPatsWithDiag/nPatsDemog,1)),
    c('Unique patients found in VITAL_SIGNS'        ,nPatsWithVital,round(100*nPatsWithVital/nPatsDemog,1))
  )
)
```
```{r echo=FALSE}
knitr::kable(demogTable, col.names=c("Characteristic","Frequency","Percent of unique patients"), row.names=FALSE, format.args = list(big.mark = ","))
```

`r ifelse(demogSummary$nDemogRows==demogSummary$nPatsDemog," ","The demographics table has duplicate rows, by person_id")`

 
```{r demographic counts, include=F}
demogCounts <- sqlQuery(sqldb, 
                  paste('SELECT gender, primary_language, race1, count(*) as nRows',

                        'FROM ',demographics,
                        'group by gender, primary_language, race1',
                        sep=" "
                        ),
                 as.is=c(TRUE,TRUE,TRUE,TRUE),
                 max=maxQryRows
                  )
demogCounts <- trimChrVars(demogCounts)

```

## Table 4. Top 5 Patient Primary Languages

```{r primary language, echo=F}
primLang <- demogCounts %>% 
            group_by(primary_language) %>% 
            summarise(langCnt = sum(nRows)) %>% 
            ungroup()  %>% 
            mutate(langTot = sum(langCnt), 
                  langPct = round(100*langCnt/langTot,1)
                  )

primLang <- within(merge(primLang,isoLang[c('code3B','InEnglish')],by.x='primary_language', by.y='code3B', all.x=T) %>% arrange(desc(langPct)) ,{
    InEnglish <- ifelse(!is.na(InEnglish),InEnglish, ifelse(is.na(primary_language) , 'Missing', 'Invalid'))
})

knitr::kable(primLang[1:5, c('primary_language', 'InEnglish','langCnt','langPct')], 
            col.names=     c("ISO Language","Language name ","Frequency","Percent"), 
            row.names=FALSE, 
            format.args = list(big.mark = ","))
```

## Table 5. Gender Distribution 

```{r gender , echo=F}
gender <-   demogCounts %>% 
            group_by(gender) %>% 
            summarise(count = sum(nRows)) %>% 
            ungroup()  %>% 
            mutate(totCount = sum(count), 
                  countPct = round(100*count/totCount,1)
                  )

gender <- within(merge(gender,subset(valSets,tableName=='DEMOGRAPHICS' & columnName=='GENDER')[c('code','decode')], by.x='gender', by.y='code', all.x=TRUE) %>% arrange(desc(countPct)) ,{
    decode <- ifelse(!is.na(decode),decode, ifelse(is.na(gender) , 'Missing', 'Invalid'))
})
 
knitr::kable(gender[    c('gender', 'decode','count','countPct')], 
            col.names = c("Value","Label","Frequency","Percent"), row.names=FALSE, 
            format.args = list(big.mark = ","))

```

## Table 6. Race Distribution

```{r race , echo=F}
race <-   demogCounts %>% 
            group_by(race1) %>% 
            summarise(count = sum(nRows)) %>% 
            ungroup()  %>% 
            mutate(totCount = sum(count), 
                  countPct = round(100*count/totCount,1)
                  )

race <- within(merge(race,subset(valSets,tableName=='DEMOGRAPHICS' & columnName=='RACE1')[c('code','decode')], by.x='race1', by.y='code', all.x=TRUE) %>% arrange(desc(countPct)) ,{
    decode <- ifelse(!is.na(decode),decode, ifelse(is.na(gender) , 'Missing', 'Invalid'))
})
 
knitr::kable(race[    c('race1', 'decode','count','countPct')], 
            col.names = c("Value","Label","Frequency","Percent"), 
            row.names=FALSE, 
            format.args = list(big.mark = ","))

```

## Table 7. Hispanic Ethnicity Distribution

```{r ethnicity , echo=F}
ethn <- odbc::dbGetQuery(con, 
  "SELECT SUM(CASE WHEN HISPANIC = 'Y' THEN 1 ELSE 0 END) as Yes,
   SUM(CASE WHEN HISPANIC = 'N' THEN 1 ELSE 0 END) as No,
   SUM(CASE WHEN HISPANIC = 'U' THEN 1 ELSE 0 END) as Unknown
      FROM DEMOGRAPHICS")

ethn2 <- data.frame(Value = c("Y", "N", "U"),
                    Label = names(ethn), 
                    Frequency = c(ethn$Yes, ethn$No, ethn$Unknown), 
                    Percent = c((ethn$Yes/tab1_dem$npats * 100), (ethn$No/tab1_dem$npats * 100), (ethn$Unknown/tab1_dem$npats * 100)))

knitr::kable(ethn2, digits = 2,
            format.args = list(big.mark = ","))

```


```{r encounter table, include=FALSE}

rm(diag)
gc()

# create a temp table in the SQL DB temp drive, this will not be pulled into the R workspace.
nada_ <- sqlQuery(sqldb,
                  paste('SELECT a.*, floor(DATEDIFF(day, b.birth_date, a.ADATE)/365.25) as age, b.birth_date, month(a.adate) as aMon, year(a.adate) as aYear, month(b.birth_date) as dobMon, year(b.birth_date) as dobYear',
                        'INTO #encTmp',
                        'FROM',encounters, ' as a left join (select distinct person_id, birth_date from ',demographics,') as b on a.person_id = b.person_id',
                        sep=" "
                        )
                  )

# short labels for encounter type 
encLabels <- data.frame(c('AV','ED','IP','LO','OE','RO'),
                        c('Ambulatory','ED','Inpatient','Lab only','Other','Radiology' ) ,
                        stringsAsFactors = F
)
names(encLabels)<-c('code','decode')

# overall enc summary
# read encounter table
encSumm  <- sqlQuery(sqldb,
                 paste('SELECT count(*) as rowCnt, count(distinct enc_id) as encCnt, count(distinct person_id) as personCnt, min(adate) as firstEnc, max(adate) as lastEnc',
                       'FROM #encTmp',
                       sep=" "
                       ),
                 as.is=c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE),
                 max=maxQryRows
                 )
encRows <- encSumm$rowCnt
encPrimKeyRows <- encSumm$encCnt
nEncPats <- encSumm$personCnt
```

#Examination of the ENCOUNTERS Table

Total rows in the dataset: `r encRows`

Total unique combinations of the primary key: `r encPrimKeyRows `

Total patients in the encounter table: `r nEncPats`

Month and year of first encounter: `r format(as.Date(encSumm$firstEnc),"%B %Y")`

Month and year of last encounter: `r format(as.Date(encSumm$lastEnc),"%B %Y")`

`r ifelse(encRows== encPrimKeyRows," ","The encounter table has duplicate rows, by enc_id")`


##Table 8 . Count of Distinct Patients by Age Group and Year of Utilization

```{r echo=F}
 
# encPersonYear  <- sqlQuery(sqldb,
#                  paste('SELECT aMon, aYear, dobMon, dobYear, count(*) as personCnt',
#                        'FROM (SELECT distinct person_id, aYear, dobMon, dobYear, min(aMon) as aMon ',
#                        '      FROM #encTmp',
#                        '      GROUP BY person_id, aYear, dobMon, dobYear) as qry',
#                        'GROUP BY  aMon, aYear, dobMon, dobYear',
#                        sep=" "
#                        ),
#                  as.is=c(TRUE,TRUE,TRUE,TRUE,TRUE),
#                  max=maxQryRows
#                  )
encPersonYear  <- sqlQuery(sqldb,
                 paste('SELECT aMon, aYear, age, count(*) as personCnt',
                       'FROM (SELECT distinct person_id, aYear, min(age) as age, min(aMon) as aMon ',
                       '      FROM #encTmp',
                       '      GROUP BY person_id, aYear) as qry',
                       'GROUP BY  aMon, aYear, age',
                       sep=" "
                       ),
                 as.is=c(TRUE,TRUE,TRUE,TRUE,TRUE),
                 max=maxQryRows
                 )
encPersonAgeYear <- within(encPersonYear,{
                           adate_YM <- as.Date(paste(as.character(aYear),as.character(aMon),'01',sep='-'))
                           #dob_YM <- as.Date(paste(as.character(dobYear),as.character(dobMon),'01',sep='-'))
                           #age <- as.numeric(floor((difftime(adate_YM, dob_YM, units='days'))/365.25))
                           ageCat <- ageCatCalc(as.numeric(age))
                    }) %>% 
                    group_by(aYear, ageCat) %>%
                    summarise(Freq = sum(personCnt)) %>% 
                    group_by(aYear) %>%
                    mutate(yearTot = sum(Freq),
                           pct = round(100*Freq/yearTot,1),
                           toDisplay = paste0(Freq,' (',pct,')')
                           )  
 # transpose to square table
encPersonAgeYear_tx <- spread(encPersonAgeYear[c('ageCat','aYear','toDisplay')],aYear,toDisplay)

knitr::kable(encPersonAgeYear_tx, 
             col.names=c("Age at First Encounter in CY, N(%)",names(encPersonAgeYear_tx)[-1]), 
             row.names=FALSE, 
             format.args = list(big.mark = ","))

```


Percentages are calculated with all patients within the calendar year as the denominator

## Figure 1. Count of Distinct Patients by Age Group and Year of Utilization

```{r echo=F}
ggplot(data = encPersonAgeYear, aes(x =aYear, y = Freq, fill = ageCat)) + 
    geom_bar(stat = "identity") + labs(y='Count', x='Year', fill='Age at encounter')+theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

##Table 9. Anual Trends in the Total Number of Recorded Encounters, the Mean Number of Encounters, the Mean Number of Patients and the Percent Change from the Previous Year, by Calendar Year

```{r tab9_res, echo = F}

tab9 <- odbc::dbGetQuery(con, 
  "select year(adate) as year,
    count(*) as nrows, 
	  count(distinct person_id) as npats
	  from encounters
	    group by year(adate)
      order by year(adate)")

tab9_avg_pats <- odbc::dbGetQuery(con, 
  "select year(adate) as year,
    count(*) as nrows
	  from encounters
	    group by year(adate), person_id
      order by year(adate)") %>% 
  arrange(year) %>% 
  group_by(year) %>% 
  summarise_all(funs(mean, median, min, max))%>% 
  mutate(
    pats_val = paste0(median, "(", min, ", ", max, ")")
  )

tab9_all <- left_join(tab9, tab9_avg_pats, by = "year") %>% 
  mutate(
    ptc_rec = if_else(is.na(nrows / dplyr::lag(nrows)), "--", paste0(round(nrows / dplyr::lag(nrows) * 100, 0), "%"))
  ) %>% 
  select(year, nrows, ptc_rec, npats, pats_val)

tab9_all$year <- as.character(tab9_all$year)

```

```{r tab9_dis, echo = FALSE}

kable(tab9_all, col.names = c("Year", "Total Number of Recorded Encountres", "Percent Change from Previous Year", "Total Number of Patients with at Least One Encounter", "Median Number of Encounters per Patient (Min, Max)"), format.args = list(big.mark = ","))

```


```{r encounter types by year and month, include=F}
encEncType_YM  <- sqlQuery(sqldb,
                 paste('SELECT aMon, aYear, encType, count(*) as rowCnt',
                       'FROM #encTmp',
                       'GROUP BY aMon, aYear, encType',
                       sep=" "
                       ),
                 as.is=c(TRUE,TRUE,TRUE,TRUE,TRUE),
                 max=maxQryRows
                 )

encEncType_YM <- within(encEncType_YM,{
               adate_YM <- as.Date(paste(as.character(aYear),as.character(aMon),'01',sep='-'))
})

```


## Table 10. Count of Encounters by Encounter Ttype 

```{r include=F}
encEncType <- encEncType_YM %>% group_by(encType) %>% summarize(Freq = sum(rowCnt))
encEncType <- merge(encEncType,subset(valSets,tableName=='ENCOUNTERS' & columnName=='ENCTYPE')[c('code','decode')], by.x='encType', by.y='code', all.x=TRUE) 
encEncType <- within(encEncType, {
                            pct <- round(100*Freq/sum(Freq),1)
                           # validVal <- ifelse(is.na(decode),'No','Yes')
                            decode <- ifelse(!is.na(decode),decode, ifelse(is.na(encType), 'Missing', 'Invalid'))
                            })[c('encType','decode','Freq','pct')]

encEncType <- encEncType %>% 
  select(-encType)
```
```{r echo=FALSE}
knitr::kable(encEncType, col.names=c("Encounter Type",'Number of Encounters','Percent of Total Encounters'), 
             row.names=FALSE, 
             format.args = list(big.mark = ","))


```


```{r include=F}
encByYear <- encEncType_YM %>% group_by(aYear ) %>% summarize(Freq = sum(rowCnt))

encByYear <- within(encByYear,{
                    pct <- round(100*Freq/sum(Freq),1)
 })
encByYear$pctChng <- NA
 for(i in 2:nrow(encByYear)){
   encByYear$pctChng[i]<-
    round(100*(encByYear$Freq[i]-encByYear$Freq[i-1])/encByYear$Freq[i-1],1)
 }

encByYear$aYear <- as.character(encByYear$aYear)

```


```{r include=F}
uniqPatByYear <- sqlQuery(sqldb,
                 paste('SELECT aYear, count(distinct person_id) as Freq',
                       'FROM #encTmp',
                       'GROUP BY aYear',
                       sep=" "
                       ),
                 as.is=c(TRUE,TRUE,TRUE,TRUE,TRUE),
                 max=maxQryRows
                 )

uniqPatByYear <- within(uniqPatByYear,{
                    pct <- round(100*Freq/sum(Freq),1)
 })
uniqPatByYear$pctChng<-NA
for(i in 2:nrow(uniqPatByYear)){
   uniqPatByYear$pctChng[i]<- round(100*(uniqPatByYear$Freq[i]-uniqPatByYear$Freq[i-1])/uniqPatByYear$Freq[i-1],1)
 }

uniqPatByYear$aYear <- as.character(uniqPatByYear$aYear)

```


```{r add labels to encEncType_YM , include=F}

encTypeBymonYr <- merge(encEncType_YM,encLabels, by.x='encType', by.y='code', all.x=TRUE) 
encTypeBymonYr <- within(encTypeBymonYr,{decode <- ifelse(!is.na(decode),decode, ifelse(is.na(encType), 'Missing', 'Invalid'))})

```

##Figure 2a. Ambulatory encounters by admission year and month

```{r echo=F}
ggplot(subset(encTypeBymonYr,encType == 'AV'), aes(adate_YM, rowCnt)) + geom_line() +
  scale_x_date(date_labels = "%b %y",date_breaks='1 year') + xlab("Month of encounter") + ylab("Frequency")+theme(axis.text.x = element_text(angle = 45, hjust = 1))


```

##Figure 2b. Other encounter types by admission year and month

```{r echo=F}
ggplot(subset(encTypeBymonYr,encType != 'AV'), aes(adate_YM, rowCnt, colour=decode)) + geom_line() +
  scale_x_date(date_labels = "%b %y",date_breaks='1 year') + xlab("Month of encounter") + ylab("Frequency")+theme(axis.text.x = element_text(angle = 45, hjust = 1))+labs(color='Encounter type')

#,legend.position="bottom" "

```

 
```{r include=F}
#
# Encounter types by year
#

encTypeByYr <- encEncType_YM %>% group_by(encType, aYear ) %>% summarize(Freq = sum(rowCnt))
encTypeByYr <- merge(encTypeByYr,encLabels, by.x='encType', by.y='code', all.x=TRUE) 
encTypeByYr <- within(encTypeByYr,{decode <- ifelse(!is.na(decode),decode, ifelse(is.na(encType), 'Missing', 'Invalid'))})

```


# Examination of the CENSUS_LOCATION Table

```{r census location, echo=F}
locSumm  <- sqlQuery(sqldb,
                 paste('SELECT count(*) as rowCnt, COUNT(DISTINCT person_id+CAST(loc_start AS varchar(10)) ) as primKeyCnt, count(distinct person_id) as personCnt, min(loc_start) as firstDT, max(loc_start) as lastDT',
                       'FROM  ',census_location,
                       sep=" "
                       ),
                 as.is=c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE),
                 max=maxQryRows
                 )

tmpLastLoc_ <- sqlQuery(sqldb,
                        paste('SELECT distinct a.*',
                              "INTO #tmpLastLoc",
                              "FROM ",census_location," AS a INNER JOIN ",
                              "(SELECT person_id, max(loc_start) as loc_start FROM",census_location,"group by person_id) AS b",
                              "ON a.person_id = b.person_id and a.loc_start=b.loc_start",
                              sep=' '
                              ),
                        max=maxQryRows
)
lastLocation <- sqlQuery(sqldb,
                         paste("SELECT stateCnty, count(*) as Freq",
                               "FROM (select distinct substring(geocode,1,5) as stateCnty, person_id FROM #tmpLastLoc) as q",
                               "GROUP BY stateCnty",
                               sep=" "),
                       as.is=c(TRUE,TRUE),
                        max=maxQryRows
                         )
lastLocation <- trimChrVars(lastLocation)
 multLastLocs <- sqlQuery(sqldb,
                          paste("SELECT count(distinct person_id) as patsMultLoc",
                                "FROM (select person_id FROM #tmpLastLoc GROUP BY person_id HAVING count(*)>1) as q",
                                sep=" "))

```

Total rows in the dataset: `r locSumm$rowCnt`

Total unique combinations of the primary key: `r locSumm$primKeyCnt `

Total patients in the location table: `r locSumm$personCnt`

Month and year of first location: `r format( as.Date(locSumm$firstDT),"%B %Y")`

Month and year of last location: `r format(as.Date(locSumm$lastDT),"%B %Y")`

`r ifelse(locSumm$rowCnt==locSumm$primKeyCnt," ","The Census Location table has duplicate rows, by person_id and loc_start")`

`r multLastLocs$patsMultLoc` patients have more than one most recent location record

##Table 11. Count of unique patients by State and County, based on most recent location

```{r echo=F}

lastLocation <- merge(lastLocation, stateCnty[c('stateCnty','stCntyNm')], by = 'stateCnty', all.x=T) %>% arrange(desc(Freq)) %>% 
                mutate(pct = round(100*Freq/sum(Freq),1),
                       stCntyNm = ifelse(!is.na(stCntyNm), stCntyNm, ifelse( is.na(stateCnty),'Missing','Invalid'))
                     )
knitr::kable(lastLocation[c('stateCnty','stCntyNm','Freq','pct')], 
             col.names=c('State/county code','State: county','Frequency','Percent'), 
             row.names=FALSE, 
             format.args = list(big.mark = ","))

```

# Examination of the DIAGNOSES Table

```{r echo=F}

diagSumm  <- sqlQuery(sqldb,
                 paste('SELECT count(*) as rowCnt, COUNT(DISTINCT enc_id+dx+CAST(adate AS varchar(10))+diagprovider ) as primKeyCnt, count(distinct person_id) as personCnt, min(adate) as firstDT, max(adate) as lastDT',
                       'FROM  ',diagnoses,
                       sep=" "
                       ),
                 as.is=c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE),
                 max=maxQryRows
                 )


```

Total rows in the dataset: `r diagSumm$rowCnt`

Total unique combinations of the primary key: `r diagSumm$primKeyCnt `

Total patients in the table: `r diagSumm$personCnt`

Month and year of first diagnosis: `r format( as.Date(diagSumm$firstDT),"%B %Y")`

Month and year of last diagnosis: `r format( as.Date(diagSumm$lastDT),"%B %Y")`

`r ifelse( diagSumm$rowCnt==diagSumm$primKeyCnt," ","The table has duplicate rows, by enc_id dx adate diagprovider")`

The following tables explore the contents of the PROCEDURES table with a focus on trends over time and most common types of procedures.

##Table 12. Annual Trends in the Total Number of Recorded Diagnoses, the Mean Number of Encounters, the Mean Number of Patients and the Percent Change from the Previous Year, by Calendar Year

This table examines the volume of diagnoses over time and the number of patients with encounters represented in the DIAGNOSES table. Average number of diagnoses per encounter, and per patient, are calculated to compare diagnosis volume trends over time.

```{r tab12_res, echo = FALSE}

tab12 <- odbc::dbGetQuery(con, 
  "select year(adate) as year,
    count(*) as nrows, 
    count(distinct enc_id) as nencts,
	  count(distinct person_id) as npats
	  from diagnoses
	    group by year(adate)
      order by year(adate)")

tab12_avg_encts <- odbc::dbGetQuery(con, 
  "select year(adate) as year,
    count(*) as nrows
	  from diagnoses
	    group by year(adate), enc_id
      order by year(adate)") %>% 
  arrange(year) %>% 
  group_by(year) %>% 
  summarise_all(funs(mean, median, min, max)) %>% 
  mutate(
    enct_val = paste0(median, "(", min, ", ", max, ")")
  ) %>% 
  select(enct_val)

tab12_avg_pats <- odbc::dbGetQuery(con, 
  "select year(adate) as year,
    count(*) as nrows
	  from diagnoses
	    group by year(adate), person_id
      order by year(adate)") %>% 
  arrange(year) %>% 
  group_by(year) %>% 
  summarise_all(funs(mean, median, min, max))%>% 
  mutate(
    pats_val = paste0(median, "(", min, ", ", max, ")")
  ) %>% 
  select(pats_val)

tab12_add <- tab12 %>% 
  bind_cols(., tab12_avg_encts, tab12_avg_pats) %>% 
  mutate(
    ptc_rec = if_else(is.na(nrows / dplyr::lag(nrows)), "--", paste0(round(nrows / dplyr::lag(nrows) * 100, 0), "%"))
  ) %>% 
  select(year, nrows, ptc_rec, nencts, npats, enct_val, pats_val)

tab12_add$year <- as.character(tab12_add$year)

```

```{r tab12_dis, echo = FALSE}

kable(tab12_add, col.names = c("Year", "Total Number of Recorded Diagnoses", "Percent Change from Previous Year", "Total Number of Encounters with 1+ Diagnosis", "Total Number of Unique Patients with 1+ Diagnosis", "Median Number of Diagnoses per Encounter (Min, Max)", "Median Number of Diagnoses per Patient (Min, Max)"), format.args = list(big.mark = ","))

```

##Table 13. Summary  of the Ten Most Common Diagnosis Codes, by All or Ambulatory Encounter Type

These tables includes information on the ten most common diagnoses recorded in your DIAGNOSES table. Data on diagnosis codes, types, counts and patients are presented for all encounters and for ambulatory only encounters (ENCTYPE=AV).

```{r tab13_res, echo = FALSE}

tab13_dxall <- odbc::dbGetQuery(con, 
  "select dx,
    dx_codetype,
    count(*) as nrows_all,
    count(distinct person_id) as npats
	  from diagnoses
	    group by dx, dx_codetype") %>% 
  arrange(desc(nrows_all)) %>% 
  head(., 10) %>% 
  mutate(
    dxCdTp  = paste(dx_codetype,'-',gsub('.','',dx, fixed=T), sep='')
  ) %>% 
  left_join(., icdLU, by = "dxCdTp") %>% 
  select(dx, dx_codetype, dxDesc, nrows_all, npats)

tab13_dxav <- odbc::dbGetQuery(con, 
  "select dx as dx_av,
    dx_codetype as dx_codetype_av,
    count(*) as nrows_av,
    count(distinct person_id) as npats_av
	  from diagnoses
      where ENCTYPE = 'AV'
	    group by dx, dx_codetype") %>% 
  arrange(desc(nrows_av)) %>% 
  head(., 10) %>% 
  mutate(
    dxCdTp  = paste(dx_codetype_av,'-',gsub('.','',dx_av, fixed=T), sep='')
  ) %>% 
  left_join(., icdLU, by = "dxCdTp") %>% 
  select(dx_av, dx_codetype_av, dxDesc, nrows_av, npats_av)

tab13_all <- bind_cols(tab13_dxall, tab13_dxav)

```


```{r tab13a_disp, echo = FALSE}

kable(tab13_dxall, col.names = c("Diagnosis Code", "Code Type", "Diagnosis Description", "Number of Recorded Diagnoses", "Number of Patients"), format.args = list(big.mark = ","))

```

```{r tab13b_disp, echo = FALSE}

kable(tab13_dxav, col.names = c("Diagnosis Code for AV", "Diagnosis Type for AV", "Diagnosis Description", "Number of Recorded Diagnosis for AV", "Number of Patients for AV"), format.args = list(big.mark = ","))

```
 
## Table 14: Summary of the Ten Most Common Diagnoses by Diagnosis Code Type, Total Number of Recorded Diagnoses and Total Number of Recorded Patients
This table includes information on the ten most common diagnoses recorded in your DIAGNOSES table. Data on diagnosis codes, counts and patients are presented for ICD-9 and ICD-10.

```{r tab14_res, echo=FALSE}

tab14_09 <- odbc::dbGetQuery(con, 
  "select top 10 dx,
    count(*) as nrows_all,
    count(distinct person_id) as npats
	  from diagnoses
	    where dx_codetype = '09'
      group by dx
      order by nrows_all DESC") 

tab14_10 <- odbc::dbGetQuery(con, 
  "select top 10 dx,
    count(*) as nrows_all,
    count(distinct person_id) as npats
	  from diagnoses
	    where dx_codetype = '10'
      group by dx
      order by nrows_all DESC") 

```

```{r tab14_disp, echo=FALSE}
#if and else statements are used to determine if the respecitvie table has any
#rows. If not, then an error message is written indicating so.

if (nrow(tab14_09) != 0){
  kable(tab14_09, col.names = c("Diagnosis", "Records", "Patients"), caption = "Diagnosis Code Type = 09", format.args = list(big.mark = ","))
} else {
   cat(noquote("Table had zero rows.  DX_CODETYPE = '09' likely isn't a category for this variable.\n"))
} 


if (nrow(tab14_10) != 0){
  kable(tab14_10, col.names = c("ProDiagnosiscedure", "Records", "Patients"), caption = "Diagnosis Code Type = 10", format.args = list(big.mark = ","))
} else {
   cat(noquote("Table had zero rows.  DX_CODETYPE = '10' likely isn't a category for this variable.\n"))
} 

```


```{r monthly counts by enc type, echo=F}

dxByMonEncTp <- sqlQuery(sqldb,
                      paste("SELECT YEAR(adate) as year, MONTH(adate) as month, enctype, count(*) as Freq",
                            "FROM " ,diagnoses,
                            "GROUP BY YEAR(adate), MONTH(adate), enctype",
                            sep=" "),
                 max=maxQryRows
                 )

dxByMonEncTp <- within(dxByMonEncTp,{
  monYr <- as.Date(paste(as.character(year),as.character(month),'01',sep="-"))
})

dxByMonEncTp <- merge(dxByMonEncTp,encLabels, by.x='enctype', by.y='code', all.x=TRUE) 
dxByMonEncTp <- within(dxByMonEncTp,{decode <- ifelse(!is.na(decode),decode, ifelse(is.na(enctype), 'Missing', 'Invalid'))})

```

## Figure 5a. Count of diagnoses by year and month in ambulatory encounters , Dataset: DIAGNOSES 

```{r echo=F}

ggplot(subset(dxByMonEncTp,enctype == 'AV'), aes(monYr, Freq)) + geom_line() +
  scale_x_date(date_labels = "%b %y",date_breaks='1 year') + xlab("Month of encounter") + ylab("Frequency")+theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Figure 5b. Count of diagnoses by year and month, other encounter types , Dataset: DIAGNOSES 

```{r echo=F}
ggplot(subset(dxByMonEncTp,enctype != 'AV'), aes(monYr, Freq, colour=decode)) + geom_line() +
  scale_x_date(date_labels = "%b %y",date_breaks='1 year') + xlab("Month of encounter") + ylab("Frequency")+theme(axis.text.x = element_text(angle = 45, hjust = 1))+labs(color='Encounter type')

#,legend.position="bottom" "

```


# Examination of the VITAL_SIGNS Table

```{r echo=F}

vitalSumm  <- sqlQuery(sqldb,
                 paste('SELECT count(*) as rowCnt, COUNT(DISTINCT person_id+CAST(measure_date AS varchar(10))+CAST(measure_time AS varchar(20)) ) as primKeyCnt, count(distinct person_id) as personCnt, min(measure_date) as firstDT, max(measure_date) as lastDT',
                       'FROM  ',vital_signs,
                       sep=" "
                       ),
                 max=maxQryRows
                 )


```

Total rows in the dataset: `r vitalSumm$rowCnt`

Total unique combinations of the primary key: `r vitalSumm$primKeyCnt `

Total patients in the table: `r vitalSumm$personCnt`

Month and year of first record: `r format(as.Date(vitalSumm$firstDT),"%B %Y")`

Month and year of last record: `r format(as.Date(vitalSumm$lastDT),"%B %Y")`

`r ifelse(vitalSumm$rowCnt==vitalSumm$primKeyCnt," ","The table has duplicate rows, by person_id, measure_date, measure_time")`


##Table 15. Vital Signs Summary

```{r echo=F}

# be sure to include space breaks in any re-design
vitalVarSumm <- function(var,label){
  
  sqlQuery(sqldb,
                 paste('SELECT variable, minimum, q1, median, q3, maximum, count(*) as nobs, count(distinct person_id) as npats ',
                       'FROM (',
                       "SELECT dummy, variable, person_id, ",var,
                       ', percentile_cont(0.0) WITHIN GROUP (ORDER BY ',var,') OVER(PARTITION BY dummy) as  Minimum',
                       ', percentile_cont(0.25) WITHIN GROUP (ORDER BY ',var,') OVER(PARTITION BY dummy) as  q1',
                       ', percentile_cont(0.5) WITHIN GROUP (ORDER BY ',var,') OVER(PARTITION BY dummy) as  Median',
                       ', percentile_cont(0.75) WITHIN GROUP (ORDER BY ',var,') OVER(PARTITION BY dummy) as  q3',
                       ', percentile_cont(1.0) WITHIN GROUP (ORDER BY ',var,') OVER(PARTITION BY dummy) as  maximum ',
                       'FROM  ',
                         "(SELECT 1 as dummy, '",label,"' as variable, * FROM ",vital_signs,") as q ",
                       'WHERE ',var,' > 0 ) as q2 ',
                       'GROUP BY variable, minimum, q1, median, q3, maximum ',
                       sep=""
                       ),
                 max=maxQryRows,
                 as.is=c(TRUE)
                 )

}
vlst <- do.call('rbind',
                list(vitalVarSumm('ht','Height'),
                     vitalVarSumm('wt','Weight'),
                     vitalVarSumm('systolic','Systolic BP'),
                     vitalVarSumm('diastolic','Diastolic BP')))

vlst <- within(vlst,{
  minimum <- round(as.numeric(minimum),1)
  q1      <- round(as.numeric(q1),1)
  median  <- round(as.numeric(median),1)
  q3      <- round(as.numeric(q3),1)
  maximum <- round(as.numeric(maximum),1)
})
knitr::kable(vlst[c('variable','nobs','npats','minimum','q1','median','q3', 'maximum')], 
             col.names=c('Vital record','Non-null Obs.','Unique patients with Non-null Obs','Minimum','Q1','Median','Q3', 'Maximum'), 
             row.names=FALSE, 
             format.args = list(big.mark = ","))

```

##T Table 16: Annual Trends in the Total Number of Recorded Vital Sign Records, the Mean Number of Encounters, the Mean Number of Patients and the Percent Change from the Previous Year, by Calendar Year

This table examines the volume of vital signs over time and the number of patients with encounters represented in the VITAL_SIGNS table. Average number of vital signs per encounter, and per patient, are calculated to compare vital signs volume trends over time; and also to indicate whether or not vital signs are captured in one row or multiple rows for each encounter.

```{r tab16_res, echo = FALSE}

tab16 <- odbc::dbGetQuery(con, 
  "select year(measure_date) as year,
    count(*) as nrows, 
    count(distinct enc_id) as nencts,
	  count(distinct person_id) as npats
	  from vital_signs
	    group by year(measure_date)
      order by year(measure_date)")

tab16_avg_encts <- odbc::dbGetQuery(con, 
  "select year(measure_date) as year,
    count(*) as nrows
	  from vital_signs
	    group by year(measure_date), enc_id
      order by year(measure_date)") %>% 
  arrange(year) %>% 
  group_by(year) %>% 
  summarise_all(funs(mean, median, min, max)) %>% 
  mutate(
    enct_val = paste0(median, "(", min, ", ", max, ")")
  ) %>% 
  select(enct_val)

tab16_avg_pats <- odbc::dbGetQuery(con, 
  "select year(measure_date) as year,
    count(*) as nrows
	  from vital_signs
	    group by year(measure_date), person_id
      order by year(measure_date)") %>% 
  arrange(year) %>% 
  group_by(year) %>% 
  summarise_all(funs(mean, median, min, max))%>% 
  mutate(
    pats_val = paste0(median, "(", min, ", ", max, ")")
  ) %>% 
  select(pats_val)

tab16_add <- tab16 %>% 
  bind_cols(., tab16_avg_encts, tab16_avg_pats) %>% 
  mutate(
    ptc_rec = if_else(is.na(nrows / dplyr::lag(nrows)), "--", paste0(round(nrows / dplyr::lag(nrows) * 100, 0), "%"))
  ) %>% 
  select(year, nrows, ptc_rec, nencts, npats, enct_val, pats_val)

tab16_add$year <- as.character(tab16_add$year)

```

```{r tab15_dis, echo = FALSE}

kable(tab16_add, col.names = c("Year", "Total Number of Recorded Vitals", "Percent Change from Previous Year", "Total Number of Encounters with Vital_Signs", "Total Number of Patients with Vitals", "Median Number of Vitals per Encounter (Min, Max)", "Median Number of Vitals per Patient (Min, Max)"), format.args = list(big.mark = ","))

```


##Figure 6. Count of vital signs by year and month, Dataset: VITAL_SIGNS

```{r echo=F}

vitalsByMonYr <- sqlQuery(sqldb,
                 paste('SELECT year(measure_date) as year, month(measure_date) as month',
                       ', sum(case when ht>0 then 1 else 0 end) as height',
                       ', sum(case when wt>0 then 1 else 0 end) as weight',
                       ', sum(case when systolic>0 then 1 else 0 end) as systolic',
                       ', sum(case when diastolic>0 then 1 else 0 end) as diastolic',
                       'FROM  ',vital_signs,
                       'GROUP BY year(measure_date), month(measure_date)',
                       sep=" "
                       ),
                 max=maxQryRows
                 )

vitalsByMonYr <- within(vitalsByMonYr,{
  monYr <- as.Date(paste(as.character(year),as.character(month),'01', sep='-'))
}) %>% subset(select=-c(month,year))

vitalsByMonYrTx <- gather(vitalsByMonYr, 'Vital_record','Count', 1:4)

ggplot(vitalsByMonYrTx, aes(monYr, Count, colour=Vital_record)) + geom_line() +
  scale_x_date(date_labels = "%b %y",date_breaks='1 year') + xlab("Month of encounter") + ylab("Frequency")+theme(axis.text.x = element_text(angle = 45, hjust = 1))+labs(color='Vital type')

```

####Total program run time:
```{r Calculate program run time, echo=FALSE}
# close odbc
 close(sqldb)

endTime <- Sys.time()
endTime - startTime 
```
